---
title: "Querying the OMOP CDM with OHDSI-SQL"
format: html
editor: source
toc: true
---

## OHDSI-SQL

Each database platform speaks its own dialect of SQL. To allow the same code to run across all database platforms supported by OHDSI, we have developed OHDSI-SQL, a SQL dialect that is a proper subset of the SQL Server SQL dialect, but also supports parameterization of the SQL code. The HADES [SqlRender](https://ohdsi.github.io/SqlRender/) package can translate OHDSI-SQL into any of the supported other SQL dialects.

You can use the online [SqlDeveloper](https://data.ohdsi.org/SqlDeveloper/) app to see how your OHDSI-SQL will be translated in to the various dialects.

The [Using SqlRender vignette](https://ohdsi.github.io/SqlRender/articles/UsingSqlRender.html) describes in detail **what SQL commands are supported**, and how the parameterization works.

## Setup

### Required packages

At the very minimum we'd need the [DatabaseConnector](http://ohdsi.github.io/DatabaseConnector/) and [SqlRender](https://ohdsi.github.io/SqlRender/) packages. For these examples we'll also use the [Eunomia](https://ohdsi.github.io/Eunomia/) package.

We will assume these packages have already been installed as part of the full HADES installation. If not you can install them using:

```{r eval=FALSE}
install.packages(c("DatabaseConnector", "SqlRender", "remotes"))
remotes::install_github("ohdsi/Eunomia")
```

### Connecting to the Eunomia database

For these examples we'll use the [Eunomia](https://ohdsi.github.io/Eunomia/) package. This package can act as a full database server with data in the OMOP Common Data Model (CDM). To be able to connect to the database, we need to ask Eunomia for the connection details:

```{r message=FALSE}
library(Eunomia)
connectionDetails <- getEunomiaConnectionDetails()
cdmDatabaseSchema <- "main"
```

We also specify that the CDM database schema is 'main'. (Different platforms have different interpretations of the words 'database' and 'schema', so we tend to use the neutral 'database schema').

We can now connect to the Eunomia database:

```{r message=FALSE}
library(DatabaseConnector)
connection <- connect(connectionDetails)
```

If you're using RStudio, then you should now see a 'Connections' panel appear in the top right. Here you can explore the various tables in the database.

![](connections.png){fig-alt="The Connections tab in RStudio"}

## Example queries

### How many persons are there in the database?

```{r}
renderTranslateQuerySql(
  connection = connection,
  sql = "SELECT COUNT(*) FROM @cdm.person;",
  cdm = cdmDatabaseSchema
)
```

You'll note that we did not explicitly mention the 'main' database schema in the SQL. Instead, we used OHDSI-SQLs parameterization, using a variable called `cdm`, which we later specified to be equal to the `cdmDatabaseSchema` variable we defined earlier. This makes our code re-usable over different databases; For another database, we simply specify other `connectionDetails` and `cdmDatabaseSchema` variables, and the same SQL will still work!

### How many kids are there?

Using the age at observation start to distinguish between kids and adults:

```{r}
sql <- "
SELECT COUNT(*)
FROM @cdm.person
INNER JOIN @cdm.observation_period
  ON person.person_id = observation_period.person_id
WHERE YEAR(observation_period_start_date) - year_of_birth <= @maxAge;
"

renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema,
  maxAge = 18
)
```

Now we had to join two tables (`person` and `observation_period`). We parameterized the `maxAge`, in case we want to make this an option we can change later.

### What is the concept ID for celecoxib?

The CDM also contains the Vocabulary, which we can query:

```{r}
sql <- "
SELECT *
FROM @cdm.concept
WHERE concept_name == '@name';
"

renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema,
  name = "celecoxib"
)
```

### How many GI bleed diagnoses are there?

In [Athena](https://athena.ohdsi.org) we see that the concept ID for gastrointestinal hemorrhage is [192671](https://athena.ohdsi.org/search-terms/terms/192671). However, we probably want to find all GI bleeds, including those that are descendants of concept 192671, so for this we'll join to the `concept_ancestor` table:

```{r}
sql <- "
SELECT COUNT(*)
FROM @cdm.condition_occurrence
INNER JOIN @cdm.concept_ancestor
  ON condition_concept_id = descendant_concept_id
WHERE ancestor_concept_id = 192671;
"
renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema
)
```

## Exercises

Now use what you've learned so far to answer the following questions:

1.  What is the minimum, maximum, and mean length (in days) of observation? (Hint: you can use the [`DATEDIFF`](https://learn.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql?view=sql-server-ver16) function to compute the time between two dates.)
2.  How many people have at least one prescription of celecoxib. (Note: there's an easy way to do this, using `drug_era`, and a harder way using `drug_exposure` and `concept_ancestor`. Can you do both?)
3.  During which period in time (calender start and end date) did people start a celecoxib prescription?

## Answers

No peeking!

### 1. What is the minimum, maximum, and mean length of observation?

```{r}
sql <- "
SELECT MIN(observation_length) AS min_days,
  MAX(observation_length) AS max_days,
  AVG(observation_length) AS mean_days
FROM (
  SELECT DATEDIFF(
    DAY, 
    observation_period_start_date, 
    observation_period_end_date
  ) AS observation_length
  FROM @cdm.observation_period
) tmp;
"

renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema
)
```

### 2. How many people have at least one prescription of celecoxib.

You can use the `drug_era` table, which already has all drugs rolled up to the ingredient level:

```{r}
sql <- "
SELECT COUNT(DISTINCT person_id)
FROM @cdm.drug_era
WHERE drug_concept_id = 1118084;
"

renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema
)
```

If you use the `drug_exposure`, you will need to use the `concept_ancestor` table to map drugs to ingredients yourself:

```{r}
sql <- "
SELECT COUNT(DISTINCT person_id)
FROM @cdm.drug_exposure
INNER JOIN @cdm.concept_ancestor
  ON drug_concept_id = descendant_concept_id
WHERE ancestor_concept_id = 1118084;
"

renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema
)
```

### 3. During which calendar dates did people start a celecoxib prescription?

Because we want to know when people started a prescription, we can't use the `drug_era` table anymore, since that combines multiple prescriptions into single eras.

```{r}
sql <- "
SELECT MIN(drug_exposure_start_date) AS min_date,
  MAX(drug_exposure_start_date) AS max_date
FROM @cdm.drug_exposure
INNER JOIN @cdm.concept_ancestor
  ON drug_concept_id = descendant_concept_id
WHERE ancestor_concept_id = 1118084;
"

renderTranslateQuerySql(
  connection = connection,
  sql = sql,
  cdm = cdmDatabaseSchema
)
```



## Disconnecting

It is good to get into the habit of closing all connections you open, making sure the database resources are avialable for the next person:

```{r}
disconnect(connection)
```
