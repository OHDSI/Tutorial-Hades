---
title: "Building Cohorts with Capr"
format: html
editor: source
toc: true
---

These exercises will walk through the steps of defining and generating cohorts using the `Capr` and `CohortGenerator` packages. For more information, go to the package website:

- [Capr](https://ohdsi.github.io/Capr/index.html)
- [CohortGenerator](https://github.com/OHDSI/CohortGenerator)

You can run the code in this document step by step on your own computer.

# Installation

To create cohort definitions using Capr you only need the `Capr` package, which we can install from Github. In these exercises we will also generate the cohorts in the `Eunomia` database, for which we'll also need the `CohortGenerator`, `DatabaseConnector` packages. We use the `Eunomia` package to simulate a database with data, and the `CirceR` package to turn our cohort definitions into a print friendly format:

```{r setup, eval=FALSE}
install.packages("remotes")
remotes::install_github("OHDSI/Capr")
remotes::install_github("OHDSI/CohortGenerator")
install.packages("DatabaseConnector", "Eunomia", "CirceR")
```

# Connect to the database

You can create definitions in Capr without a database connection, but having a connection with a database in the Common Data Model (CDM) helps by retrieving concept information:

```{r, message=FALSE}
library(DatabaseConnector)

connectionDetails <- Eunomia::getEunomiaConnectionDetails()
connection <- connect(connectionDetails)
```

# Create a Capr concept set

Gastrointestinal bleeding concept is 192671. 

```{r}
library(Capr)
gibleed <- cs(descendants(192671), name = "GI bleed")
```

If we have a connection to a database in CDM format, we can retrieve information on the concepts we selected:

```{r warning=FALSE}
gibleed <- getConceptSetDetails(gibleed, connection, "main")
gibleed
as.json(gibleed)
```

# Create a simple Capr cohort

We can use our concept set to create a simple cohort, where people enter if a concept in our concept is detected in the `condition_occurrence` table:

```{r}
gibleed <- cs(descendants(192671), name = "GI bleed")
gibleedCohort <- cohort(entry = entry(conditionOccurrence(gibleed)))
```

Note that, by default, people exit at the end of their observation period.

# Creating more complex cohorts

Let's create two more complex simple cohorts, with inclusion rules and exit criteria. We require that people have no prior exposure to NSAIDs (here for simplicity defined as any descendant of our two drugs). People exit the cohorts at the end of expsosure, allowing for 30-days between subsequent prescriptions:

```{r}
# Concept sets:
celecoxibConceptId <- 1118084
diclofenacConceptId <- 1124300
nsaids <- cs(
  descendants(c(celecoxibConceptId, diclofenacConceptId)), 
  name = "NSAIDS"
)
celecoxib <- cs(
  descendants(celecoxibConceptId),
  name = "Celecoxib"
)
diclofenac  <- cs(
  descendants(diclofenacConceptId),
  name = "Diclofenac"
)

# Inclusion criterion:
attrition = attrition(
  "No prior NSAID exposure" = withAll(
    exactly(0, drugExposure(nsaids), duringInterval(eventStarts(-Inf, -1)))
  )
)

# Cohorts:
celecoxibCohort <- cohort(
  entry = entry(
    drugExposure(celecoxib, firstOccurrence()),
    observationWindow = continuousObservation(priorDays = 365)
  ),
  attrition = attrition,
  exit = exit(endStrategy = drugExit(celecoxib,
                                     persistenceWindow = 30,
                                     surveillanceWindow = 0))
)
diclofenacCohort <- cohort(
  entry = entry(
    drugExposure(diclofenac, firstOccurrence()),
    observationWindow = continuousObservation(priorDays = 365)
  ),
  attrition = attrition,
  exit = exit(endStrategy = drugExit(diclofenac,
                                     persistenceWindow = 30,
                                     surveillanceWindow = 0))
)
```

# Print friendly

We can generate a print-friendly output of any cohort definition using the `CirceR` package:

```{r}
rmarkdown <- CirceR::cohortPrintFriendly(toCirce(celecoxibCohort))
writeLines(rmarkdown)
```

We can also use CirceR to generate SQL, but it is easier to directly use our cohort definitions with the `CohortGenerator` package.

# Generate the cohorts

First we need to create a "Cohort Set" object, after which we can instruct CohortGenerator to generate the cohorts:

```{r}
cohortsToCreate <- makeCohortSet(gibleedCohort, 
                                 celecoxibCohort, 
                                 diclofenacCohort)

# Create the cohort tables to hold the cohort generation results
cohortTableNames <- CohortGenerator::getCohortTableNames(cohortTable = "my_cohort_table")

CohortGenerator::createCohortTables(connectionDetails = connectionDetails,
                                    cohortDatabaseSchema = "main",
                                    cohortTableNames = cohortTableNames)
# Generate the cohorts
cohortsGenerated <- CohortGenerator::generateCohortSet(connectionDetails = connectionDetails,
                                                       cdmDatabaseSchema = "main",
                                                       cohortDatabaseSchema = "main",
                                                       cohortTableNames = cohortTableNames,
                                                       cohortDefinitionSet = cohortsToCreate)

cohortsGenerated
```

# Inspect the cohorts

To see that the cohorts generated successfully we can display the cohort counts:

```{r}
CohortGenerator::getCohortCounts(connectionDetails = connectionDetails, 
                                 cohortDatabaseSchema = "main", 
                                 cohortTable = cohortTableNames$cohortTable)
````

There should be counts in all three cohorts.

# Exercises

Now try it yourself. Create a cohort definition for hypertension. For this exercise, we define hypertension as an occurrence of *Essential Hypertension* (concept ID 320128) and any of its descendants, a *systolic blood pressure* (concept ID 3004249) greater than or equal to 130 *mmHg* (concept ID 8876), or a *diastolic blood pressure* (concept ID 3012888) greater than or equal to 80. People must enter the cohort at the first of any of these events, and remain in the cohort until end of observation.

Hint: there are [examples on the Capr website](https://ohdsi.github.io/Capr/articles/Examples.html) that will help here.

# Answers

```{r}
essentialHypertension <- cs(
  descendants(320128),
  name = "Essential hypertension"
)

sbp <- cs(3004249, name = "SBP")
dbp <- cs(3012888, name = "DBP")

hypertensionCohort <- cohort(
  entry = entry(
    conditionOccurrence(essentialHypertension),
    measurement(sbp, valueAsNumber(gte(130)), unit(8876)),
    measurement(dbp, valueAsNumber(gte(80)), unit(8876))
  ),
  exit = exit(
    endStrategy = observationExit()
  )
)
```


```{r, include=FALSE, echo=FALSE}
disconnect(connection)
```
